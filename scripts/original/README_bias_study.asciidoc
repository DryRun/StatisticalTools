= Bias study
:toc: 

This document provides instructions and a complete working example to perform a bias study for the dijet analysis as described in AN-15-175.
For the moment the input files are in Rome T2 in `gdimperi` area but should be accessible to every Rome T2 user.

== Introduction

The bias study described here is based on the `combine` tool, which is a framework for statistical analysis developed originally in the context of Higgs analysis. 
The combine code is hosted in https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit[combine @ Github] and the documentation can be found in the https://twiki.cern.ch/twiki/bin/viewauth/CMS/SWGuideHiggsAnalysisCombinedLimit[twiki page].

== Setup

Download the combine code and the https://gitlab.cern.ch/CMSDIJET/StatisticalTools[StatisticalTools] repository of dijet analysis.

....
cmsrel CMSSW_7_1_5
cd CMSSW_7_1_5/src
cmsenv
git clone https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit.git HiggsAnalysis/CombinedLimit
git clone https://gitlab.cern.ch/CMSDIJET/StatisticalTools.git
....

NOTE: If you want to save some extra information in the standard output of combine code (values of the fit parameters for all the toys), necessary to visualize the fit of all the toy experiments, you should also checkout the private "HiggsAnalysis-CombinedLimit" repository.
Keep in mind that this branch has diverged from the official code in Spring 2015, therefore some changes may have occurred in the original code in the meantime. If you download the private branch you won't have the up-tp-date version of the combine code.
By the way, the relevant changes introduced in the private branch should be only in `src/MaxLikelihoodFit.cc` and `interface/MaxLikelihoodFit.h`.


....
cd HiggsAnalysis/CombinedLimit/
git remote add -f my-higgsanalysis https://github.com/CMSDIJET/HiggsAnalysis-CombinedLimit
git fetch my-higgsanalysis 
git checkout -b test my-higgsanalysis/test
scramv1 b clean; scramv1 b
....

== Create datacards

This step is the basis to all the possible usages of combine.
To generates the datacards for the dijet analysis you can use the script `create_datacard.py` in https://gitlab.cern.ch/CMSDIJET/StatisticalTools[StatisticalTools] repository.
This script is configurable with different options:

....
--mass <mass>           mass of the signal   
-o <outdir>             output directory where to write datacards
-n <tag>                name to identify which configuration you are using to produce the datacard
--inputBkg <filename>   file containing the mjj spectrum in 1 GeV bins for QCD MC (full path)
--inputData <filename>  file containing the mjj spectrum in 1 GeV bins for (pseudo)data (full path)
--inputSig  <filename>  file containing the mjj spectrum in 1 GeV bins for signal shapes (full path)
--lumi <lumi>           total luminosity to be simulated \pb default=1000
--lumi_in <lumi_input>  total luminosity of the data input file 
--fitSig                if present, shape of signal is obtained from a fit to MC with gaussian+CB (not used in dijet analysis)
--histpdfSig            if present, shape of signal is a template obtained from MC 
--histpdfBkg            if present, shape of background is a template obtained from MC   
--fitDat                if present, shape of background is the standard dijet parametrization and the initial values are determined fitting the (pseudo)data 
--bkgConst              if present, shape parameters of background are set as constants 
--bkgNuisance           if present, shape parameters of background are treated as nuisance parameters with gaussian spread
                        (if not present, background parameters are treated as flat parameters defined in a very large range)
....

=== Example 

Running
....
cd StatisticalTools
mkdir datacards_biasStudy_Spring15/
cd scripts
python run_create_datacard.py
....
you will automatically create, for each mass point from 1400 to 9000 GeV in 200 GeV steps:

* one datacard + one workspace, to generate 1000 toys from the fit to data (renormalized to 2 /fb)
* one datacard + one workspace, to generate 1000 toys from the MC template (renormalized to 2 /fb)
* one datacard + one workspace, to fit the dijet spectrum with the 4-param function (defined in `create_datacard.py`)  

Make lists of these datacards that will be needed in the following examples:
....
mkdir ../lists
find -name ../datacards_biasStudy_Spring15/ | grep genMChist > ../lists/list_datacards_biasStudy_Spring15_genMChist.txt 
find -name ../datacards_biasStudy_Spring15/ | grep genFit_dataJECV6 > ../lists/list_datacards_biasStudy_Spring15_genFit_dataJECV6.txt 
find -name ../datacards_biasStudy_Spring15/ | grep toFit > ../lists/list_datacards_biasStudy_Spring15_toFit.txt 
....

== Run limits (Asymptotic)

NOTE: This step is necessary to perform a bias study injecting a signal of magnitude about 2 sigma (calculated for a qg final state) and has to be run before the proper bias study.
This step is necessary  because the signal size corresponding to 2 sigma significance is different at each mass. 

The command to run limits in asymptotic mode is
....
combine -M Asymptotic -n samplename  --rMax 10000  datacard.txt
....
where the option `-n samplename` specifies a string appended to the standard output file name, and `--rMax X` specifies the boundary of numer of signal events set in the fits. Here We use a  loose boundary of 10000. 

=== Example

With the commmand
....
python submit_limits_batch.py -q cmsan -i ../lists/list_datacards_biasStudy_Spring15_toFit.txt  -o output_limits_biasStudy_2fb-1/ 
....
you will run in the Rome batch system the command to obtain upper limits on the number of signal events (with one and two-sigma band) for a quark-gluon final state and each mass point. 


== Generate toys and run fits

For the bias study you need:

* one datacard + workspace for mass point for the generation
* one datacard + workspace for mass point for the fitting
* the number of signal events to inject at each mass point corresponding to roughly 2 sigma significance

You should have obtained the datacards and the limits in the previous examples. 
Once you have the datacards you can run the fits in batch using the script submit_fits_batch.py with the following options

....
-q <queue name>      batch queue
--inputListGen <file name>     input list of datacards to generate B and S+B toys (full path)
--inputListFit <file name>     input list of datacards to fit toys   (full path)
--inputFileLimits <file name>  input file containing the limits (necessary to test 2sigma hypotesis) (full path)
--output <outdir>              output directory
-t <n_toys>                    number of toys
--mu <signal strenght>         signal strenght (if -999 the script uses the 2sigma up-band of the upper limit)
--tag <any useful tag>         name to tag the output 
--run                          if present, submit toys, otherwise just create scripts for submission       
....

Scripts for batch submission and log files will be saved in the directory `batch/`.

=== Example

The following commands will run the generation+fitting of 1000 toy experiments with background + signal (2-sigma significance) at each mass point in two cases:

* the "closure test": toy experiments are generated from the fit to data
* toy experiments are generated from the MC histogram template

Here the Rome T2 batch system is used. 
....
python submit_fits_batch.py -q cmsan --inputListGen ../lists/list_datacards_biasStudy_Spring15_genFit_dataJECV6.txt   --inputListFit ../lists/list_datacards_biasStudy_Spring15_toFit.txt --output output_toys_biasStudy_Spring15_genFit_dataJECV6_muLimit/ -t 1000 --mu -999 --run
python submit_fits_batch.py -q cmsan --inputListGen ../lists/list_datacards_biasStudy_Spring15_genMChist.txt   --inputListFit ../lists/list_datacards_biasStudy_Spring15_toFit.txt --output output_toys_biasStudy_Spring15_genMChist_muLimit_test/ -t 1000 --mu -999 --run
....


You will have many output files in the output directory. 
For each mass point:

* higgsCombine*.GenerateOnly.mH120.123456.root
* higgsCombine*.MaxLikelihoodFit.mH120.123456.root
* mlfit*.root

The first one contains the toys saved as RooDatasets, the second is not useful, the third contains the trees tree_fit_b and tree_fit_sb. 
These trees contain the central values of each fitted parameter and the error on the signal strenght. 
The tree_fit_b contains the results of all the fits with the signal strenght set constant to 0, and tree_fit_sb the results with the signal strenght as a free parameter.

If you want to look at the plots you have to combine the informations saved in the output files (toys distributions and fit results). 
This can be done with the script `plotFits.py`, with the following options:
....
-i <list_name>             input list of datacards for the fits
--inputFitRes <dir name>   directory with fit results
--inputToys <dir name>     dirctory with toys 
-o <dir name >             output directory name
--tag <tag>                string to append to the output names
--mu <signal strenght>     signal strenght (if -999 the script uses the 2sigma up-band of the upper limit)
-t <num of toys to plot>   num of toys to plot
....

=== Example

To draw 10 fits at each mass, run: 
....
mkdir output_plots_biasStudy_Spring15_genFit_dataJECV6_muLimit_test/
python plotFits.py --inputList ../lists/list_datacards_biasStudy_Spring15_toFit.txt --inputFitRes output_toys_biasStudy_Spring15_genFit_dataJECV6_muLimit/ --inputToys output_toys_biasStudy_Spring15_genFit_dataJECV6_muLimit/ -o output_plots_biasStudy_Spring15_genFit_dataJECV6_muLimit/  --mu -999  -t 10 --tag genFit_dataJECV6
....

== Calculate and plot bias

With `plotPulls.py` you can plot the pull distributions and the bias vs mass.
The script can be configured with the following options:
....
--inputList <list of datacards>  
--inputFitRes <directory with fit res> 
-o <outputdir>  
--mu <sig strenght> 
--tag <tag_in_filename>
....

NOTE: the `--inputList` , `--mu` and `--tag` options are needed  to make the program find the name structure of the files. 
This is true for both the scripts `plotPulls.py` and `plot_fits.py`.

=== Example

To draw the bias VS mass, run:
....
mkdir output_pulls_genFit_dataJECV6_muLimit/
python plotPulls.py --inputList ../lists/list_datacards_biasStudy_Spring15_toFit.txt --mu -999 -o  output_pulls_genFit_dataJECV6_muLimit/ --inputFitRes output_toys_biasStudy_Spring15_genFit_dataJECV6_muLimit/ --tag genFit_dataJECV6
....